syntax = "proto3";

message Config {
  GameCharactersConfig charactersConfig = 1;
  GameEffectsConfig effectsConfig = 2;
  GameStateConfig gameConfig = 3;
  GameLootsConfig lootsConfig = 4;
  GameProjectilesConfig projectilesConfig = 5;
  GameSkillsConfig gameSkillsConfig = 6;
}

message GameCharactersConfig {
  repeated GameCharacter characters = 1;
}

message GameEffectsConfig {
  repeated GameEffect effects = 1;
}

/* Represents the initial game state.
    - width_ The width of the playing area.
    - height: The length of the playing area.
    - map_modification: If present, contains the information for when the map modification mechanic is triggered
    - loot_interval_ms: If present, interval in milliseconds for spawning loot crates
*/
message GameStateConfig {
    uint64 width = 1;
    uint64 height = 2;
    MapModification map_modification = 3;
    uint64 loot_interval_ms = 4;
}

message GameLootsConfig {
  repeated GameLoot loots = 1;
}

message GameProjectilesConfig {
  repeated GameProjectile projectiles_config = 1;
}

message GameSkillsConfig {
  repeated GameSkill skills = 1;
}

/* The information for when the map modification mechanic is triggered.
    - modification: Defines how to modify the playable area radius.
    - starting_radius: Starting radius for the playable area.
    - minimum_radius: Mininum radius for the playable area, how small can the playable zone get.
    - max_radius: Max radius for the playable area, how big can the playable zone get.
    - outside_radius_effects: Effects given when a player is outside the playable area.
    - inside_radius_effects: Effects given when a player is inside the playable area.
*/
message MapModification {
    Modification modification = 1;
    uint64 starting_radius = 2;
    uint64 minimum_radius = 3;
    uint64 max_radius = 4;
    repeated string outside_radius_effects = 5;
    repeated string inside_radius_effects = 6;
}

/* Defines how to modify the playable area radius.
    - modifier: Determines how `value` interacts with the current value of the attribute, it can be one of
    - additive: Given value is added to current value
    - multiplicative: Given value is multiplied to current value
    - override: Given value is set as the attribute value
    - value: The value we are using for the changemessage Modification
*/
message Modification {
    string modifier = 1;
    int64 value = 2;
}

/*
    - name: unique name for the loot, this will be referenced by other configurations
    - size: radius size of the loot
    - effects: List of effects the loot will give out
*/
message GameLoot {
    string name = 1;
    uint64 size = 2;
    repeated string effects = 3;
}

/*
    - `name`: Unique name for the projectile, this will be referenced by other configurations
    - `base_damage`: Damage done by the projectile on collision
    - `base_speed`: Travel speed of the projectile
    - `base_size`: Size of the projectile for collision math
    - `player_collision`: Determines if the projectile is removed from game after colliding with a player, default is `true`
    - `on_hit_effects`: Effects given to target on collision
    - `duration_ms`: Defines how long in milliseconds the projectile can exist
    - `max_distance`: Defines the maximum distance the projectile can travel
*/
message GameProjectile {
    string name = 1;
    uint64 base_damage = 2;
    uint64 base_speed = 3;
    uint64 base_size = 4;
    bool player_collision = 5;
    repeated string on_hit_effect = 6;
    uint64 max_distance = 7;
    float duration_ms = 8;
}

/* Represents a character in the game
- name: Unique name of the character.
- active: Can the character be picked?
- base_speed: Base speed of the character.
- base_size: Size of the character for collision math.
- skills: A map of integer (as string) to skills, where the integers represent the id and ordering of skills for calling them.
*/
message GameCharacter {
    string name = 1;
    bool active = 2;
    uint64 base_speed = 3;
    uint64 base_size = 4;
    repeated GameSkill skills = 5;
}

/* Represents a skill of a character
- name: Unique name for the skill.
- cooldown_ms: Time that needs to elapse before the skill is usable again.
- is_passive: Marks the skill as a passive skill, this means it can't be triggered. Instead it will trigger on player spawn, so only `GiveEffect` makes sense for it.
- mechanics: Core mechanic of the skill (e.g hit, shoot, etc).
*/
message GameSkill {
    string name = 1;
    uint64 cooldown_ms = 2;
    bool is_passive = 3;
    repeated Mechanic mechanics = 4;
}

/*
- GiveEffect: This makes the skill give a certain effect.
  * effects: List of effects given.
- Hit: Player will hit all things in area of target.
  * damage: Damage done to targets.
  * range: Up to how far away can things be hit.
  * cone_angle: Defines how the cone of hit is generated.
  * on_hit_effects: Effects given to targets hit by skill.
- SimpleShoot: Player will shoot a projectile.
  * projectile: Projectile to shoot.
- MultiShoot: Player will shoot multiple shots of a projectile.
  * projectile: Projectile to shoot.
  * count: How many projectiles will be shot.
  * cone_angle: Defines how wide is the angle to spread the projectiles on.
- MoveToTarget: Player will be moved to target position.
  * duration_ms: How long it takes to move the player, 0 means instantly.
  * max_range: Maximum distance allowed to move, if target is beyond this limit movement will be capped to this point.
*/
message Mechanic {
    string name = 1;
    repeated string effects = 2;
    uint64 damage = 3;
    uint64 range = 4;
    uint64 cone_angle = 5;
    repeated string on_hit_effects = 6;
    GameProjectile projectile = 7;
    uint64 count = 8;
    uint64 duration_ms = 9;
    uint64 max_range = 10;
}

/* Represents an effect acting on a player.
- name: unique name for the effect.
- effect_time_type: This determines how the effect is applied. It can be any of:
  - Instant: Effect is executed once and removed
  - Duration: Effect is stuck on the player for a duration
    - duration_ms
  - Permanent: Effect lasts forever and can only be removed by other effects
  - Periodic: Like an Instant, but the effect is applied many times over a period of time
    - instant_application: Boolean specifying if first application of effect should happen at instant 0 or not
    - interval_ms: Every X milliseconds the effect will be applied
    - trigger_count: Sets how many times the effect will be applied
- player_attributes: Attributes changes that will be applied over the player having this effect
- projectile_attributes: Attributes changes that will be applied over the projectiles of the player having this effect
*/
message GameEffect {
  string name = 1;
  oneof effect_type {
    string simple_type = 2;
    Duration duration_type = 3;
    Periodic periodic_type = 4;
  }

  message Duration {
    string type = 1;
    uint64 duration_ms = 2;
  }

  message Periodic {
    string type = 1;
    string instant_application = 2;
    uint64 interval_ms = 3;
    uint64 trigger_count = 4;
  }
}
